@use "sass:math";
@use 'variables' as *;
@use 'functions' as *;

//media query mobile first
@mixin breakpoint($size) {
  @media (min-width: map-get($breakpoints-up, $size)) {
    @content;
  }
}

//mixin grid system
@mixin grid-flex($breakpoints: null) {
  $bk: if($breakpoints == null, '', '-#{$breakpoints}');
  @for $i from 1 through 12 {
    .flex-col#{$bk}-#{$i} {
      padding-left: $gap;
      padding-right: $gap;
      width: math.div($i, 12) * 100%;
      flex: 0 0 auto;
    }

    .flex-col-#{$breakpoints}-offset-#{$i}{
      margin-left: math.div($i, 12) * 100%;
    }
  }
}

//mixin flex class
@mixin flex-class($breakpoints: null){
  $bk: if($breakpoints == null, '', '-#{$breakpoints}');
  @each $flex, $property in $flex-class{
    @each $class, $prop in $property{
      &-#{$class}#{$bk}{
        #{$flex}: unquote($prop) !important;
      }
    }
  }
}

//mixin margin or padding class
@mixin spacing-class($breakpoints: null){
  $bk: if($breakpoints == null, '', '-#{$breakpoints}');
  @for $i from 0 through (length($spacers) - 1){
    @each $spacer, $property in $spacing-class{
      @each $spacing, $prop in $property{
        .#{$spacer}#{$spacing}#{$bk}-#{$i}{
          #{$prop}: map-get($spacers, $i);
        }
      }
    }
  }
}

@mixin container($size: 1250){
  margin: 0 auto;
  width: min(100% - $gap * 2, rem($size));
}

@mixin reset-button(){
  background: none;
  border: 0;
  padding: 0;
}
